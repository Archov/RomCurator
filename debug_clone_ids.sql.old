-- Additional debug queries to understand the numeric ID system

-- 6. Check if there are any patterns in the release_title that might contain these IDs
SELECT 
    dat_entry_id,
    release_title,
    is_clone,
    clone_of,
    -- Look for numeric patterns in titles
    CASE 
        WHEN release_title GLOB '*[0-9][0-9][0-9][0-9]*' THEN 'HAS_4_DIGITS'
        WHEN release_title GLOB '*[0-9][0-9][0-9]*' THEN 'HAS_3_DIGITS' 
        ELSE 'NO_OBVIOUS_DIGITS'
    END as title_pattern
FROM dat_entry 
WHERE is_clone = 0
ORDER BY dat_entry_id
LIMIT 20;

-- 7. Check if clone_of values might correspond to dat_entry_id values
SELECT 
    clone.release_title as clone_title,
    clone.clone_of,
    parent_by_id.release_title as potential_parent_by_id,
    parent_by_id.dat_entry_id
FROM dat_entry clone
LEFT JOIN dat_entry parent_by_id ON CAST(clone.clone_of AS INTEGER) = parent_by_id.dat_entry_id
WHERE clone.is_clone = 1 
    AND clone.clone_of IS NOT NULL 
    AND clone.clone_of != ''
    AND clone.clone_of GLOB '[0-9]*'  -- Only numeric clone_of values
LIMIT 20;

-- 8. Check if clone_of values might be zero-padded versions of dat_entry_id
SELECT 
    clone.release_title as clone_title,
    clone.clone_of,
    parent_by_padded.release_title as potential_parent_by_padded_id,
    parent_by_padded.dat_entry_id,
    printf('%04d', parent_by_padded.dat_entry_id) as padded_id
FROM dat_entry clone
LEFT JOIN dat_entry parent_by_padded ON clone.clone_of = printf('%04d', parent_by_padded.dat_entry_id)
WHERE clone.is_clone = 1 
    AND clone.clone_of IS NOT NULL 
    AND clone.clone_of != ''
LIMIT 20;

-- 9. Look at the original XML structure - check what attributes the No-Intro script is reading
-- This will help us understand if we're missing some ID field from the DAT XML

-- 10. Summary of clone_of value patterns
SELECT 
    LENGTH(clone_of) as clone_of_length,
    COUNT(*) as count,
    MIN(clone_of) as min_value,
    MAX(clone_of) as max_value,
    GROUP_CONCAT(DISTINCT clone_of, ', ') as sample_values
FROM dat_entry 
WHERE is_clone = 1 
    AND clone_of IS NOT NULL 
    AND clone_of != ''
GROUP BY LENGTH(clone_of)
ORDER BY clone_of_length;
